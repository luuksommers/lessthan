//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model", "FK_Task_Creator", "UserProfile", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LessThan.Models.UserProfile), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LessThan.Models.Task), true)]
[assembly: EdmRelationshipAttribute("Model", "FK_Task_ParentTask", "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LessThan.Models.Task), "Task1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LessThan.Models.Task), true)]
[assembly: EdmRelationshipAttribute("Model", "FK_Task_Team", "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LessThan.Models.Team), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LessThan.Models.Task), true)]
[assembly: EdmRelationshipAttribute("Model", "FK_UserProfileTeam_Team", "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LessThan.Models.Team), "UserProfileTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LessThan.Models.UserProfileTeam), true)]
[assembly: EdmRelationshipAttribute("Model", "FK_UserProfileLogin_UserProfile", "UserProfile", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(LessThan.Models.UserProfile), "UserProfileLogin", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LessThan.Models.UserProfileLogin), true)]
[assembly: EdmRelationshipAttribute("Model", "FK_UserProfileTeam_UserProfile", "UserProfile", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(LessThan.Models.UserProfile), "UserProfileTeam", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(LessThan.Models.UserProfileTeam), true)]

#endregion

namespace LessThan.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class LessThanDatabase : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new LessThanDatabase object using the connection string found in the 'LessThanDatabase' section of the application configuration file.
        /// </summary>
        public LessThanDatabase() : base("name=LessThanDatabase", "LessThanDatabase")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LessThanDatabase object.
        /// </summary>
        public LessThanDatabase(string connectionString) : base(connectionString, "LessThanDatabase")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new LessThanDatabase object.
        /// </summary>
        public LessThanDatabase(EntityConnection connection) : base(connection, "LessThanDatabase")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Task> Tasks
        {
            get
            {
                if ((_Tasks == null))
                {
                    _Tasks = base.CreateObjectSet<Task>("Tasks");
                }
                return _Tasks;
            }
        }
        private ObjectSet<Task> _Tasks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Team> Teams
        {
            get
            {
                if ((_Teams == null))
                {
                    _Teams = base.CreateObjectSet<Team>("Teams");
                }
                return _Teams;
            }
        }
        private ObjectSet<Team> _Teams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserProfile> UserProfiles
        {
            get
            {
                if ((_UserProfiles == null))
                {
                    _UserProfiles = base.CreateObjectSet<UserProfile>("UserProfiles");
                }
                return _UserProfiles;
            }
        }
        private ObjectSet<UserProfile> _UserProfiles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserProfileLogin> UserProfileLogins
        {
            get
            {
                if ((_UserProfileLogins == null))
                {
                    _UserProfileLogins = base.CreateObjectSet<UserProfileLogin>("UserProfileLogins");
                }
                return _UserProfileLogins;
            }
        }
        private ObjectSet<UserProfileLogin> _UserProfileLogins;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserProfileTeam> UserProfileTeams
        {
            get
            {
                if ((_UserProfileTeams == null))
                {
                    _UserProfileTeams = base.CreateObjectSet<UserProfileTeam>("UserProfileTeams");
                }
                return _UserProfileTeams;
            }
        }
        private ObjectSet<UserProfileTeam> _UserProfileTeams;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tasks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTasks(Task task)
        {
            base.AddObject("Tasks", task);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Teams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTeams(Team team)
        {
            base.AddObject("Teams", team);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserProfiles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserProfiles(UserProfile userProfile)
        {
            base.AddObject("UserProfiles", userProfile);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserProfileLogins EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserProfileLogins(UserProfileLogin userProfileLogin)
        {
            base.AddObject("UserProfileLogins", userProfileLogin);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserProfileTeams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserProfileTeams(UserProfileTeam userProfileTeam)
        {
            base.AddObject("UserProfileTeams", userProfileTeam);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Task")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Task : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Task object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="taskDescription">Initial value of the TaskDescription property.</param>
        /// <param name="dateCreated">Initial value of the DateCreated property.</param>
        /// <param name="isDone">Initial value of the IsDone property.</param>
        /// <param name="timeSpent">Initial value of the TimeSpent property.</param>
        /// <param name="creatorId">Initial value of the CreatorId property.</param>
        public static Task CreateTask(global::System.Int32 id, global::System.String taskDescription, global::System.DateTime dateCreated, global::System.Boolean isDone, global::System.TimeSpan timeSpent, global::System.Int32 creatorId)
        {
            Task task = new Task();
            task.Id = id;
            task.TaskDescription = taskDescription;
            task.DateCreated = dateCreated;
            task.IsDone = isDone;
            task.TimeSpent = timeSpent;
            task.CreatorId = creatorId;
            return task;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Project
        {
            get
            {
                return _Project;
            }
            set
            {
                OnProjectChanging(value);
                ReportPropertyChanging("Project");
                _Project = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Project");
                OnProjectChanged();
            }
        }
        private global::System.String _Project;
        partial void OnProjectChanging(global::System.String value);
        partial void OnProjectChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TaskDescription
        {
            get
            {
                return _TaskDescription;
            }
            set
            {
                OnTaskDescriptionChanging(value);
                ReportPropertyChanging("TaskDescription");
                _TaskDescription = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TaskDescription");
                OnTaskDescriptionChanged();
            }
        }
        private global::System.String _TaskDescription;
        partial void OnTaskDescriptionChanging(global::System.String value);
        partial void OnTaskDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AssignedTo
        {
            get
            {
                return _AssignedTo;
            }
            set
            {
                OnAssignedToChanging(value);
                ReportPropertyChanging("AssignedTo");
                _AssignedTo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AssignedTo");
                OnAssignedToChanged();
            }
        }
        private global::System.String _AssignedTo;
        partial void OnAssignedToChanging(global::System.String value);
        partial void OnAssignedToChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDone
        {
            get
            {
                return _IsDone;
            }
            set
            {
                OnIsDoneChanging(value);
                ReportPropertyChanging("IsDone");
                _IsDone = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDone");
                OnIsDoneChanged();
            }
        }
        private global::System.Boolean _IsDone;
        partial void OnIsDoneChanging(global::System.Boolean value);
        partial void OnIsDoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.TimeSpan> EstimatedTime
        {
            get
            {
                return _EstimatedTime;
            }
            set
            {
                OnEstimatedTimeChanging(value);
                ReportPropertyChanging("EstimatedTime");
                _EstimatedTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EstimatedTime");
                OnEstimatedTimeChanged();
            }
        }
        private Nullable<global::System.TimeSpan> _EstimatedTime;
        partial void OnEstimatedTimeChanging(Nullable<global::System.TimeSpan> value);
        partial void OnEstimatedTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan TimeSpent
        {
            get
            {
                return _TimeSpent;
            }
            set
            {
                OnTimeSpentChanging(value);
                ReportPropertyChanging("TimeSpent");
                _TimeSpent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeSpent");
                OnTimeSpentChanged();
            }
        }
        private global::System.TimeSpan _TimeSpent;
        partial void OnTimeSpentChanging(global::System.TimeSpan value);
        partial void OnTimeSpentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DueDate
        {
            get
            {
                return _DueDate;
            }
            set
            {
                OnDueDateChanging(value);
                ReportPropertyChanging("DueDate");
                _DueDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DueDate");
                OnDueDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _DueDate;
        partial void OnDueDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDueDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TeamId
        {
            get
            {
                return _TeamId;
            }
            set
            {
                OnTeamIdChanging(value);
                ReportPropertyChanging("TeamId");
                _TeamId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TeamId");
                OnTeamIdChanged();
            }
        }
        private Nullable<global::System.Int32> _TeamId;
        partial void OnTeamIdChanging(Nullable<global::System.Int32> value);
        partial void OnTeamIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CreatorId
        {
            get
            {
                return _CreatorId;
            }
            set
            {
                OnCreatorIdChanging(value);
                ReportPropertyChanging("CreatorId");
                _CreatorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatorId");
                OnCreatorIdChanged();
            }
        }
        private global::System.Int32 _CreatorId;
        partial void OnCreatorIdChanging(global::System.Int32 value);
        partial void OnCreatorIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParentTaskId
        {
            get
            {
                return _ParentTaskId;
            }
            set
            {
                OnParentTaskIdChanging(value);
                ReportPropertyChanging("ParentTaskId");
                _ParentTaskId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentTaskId");
                OnParentTaskIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ParentTaskId;
        partial void OnParentTaskIdChanging(Nullable<global::System.Int32> value);
        partial void OnParentTaskIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_Task_Creator", "UserProfile")]
        public UserProfile UserProfile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_Task_Creator", "UserProfile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_Task_Creator", "UserProfile").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserProfile> UserProfileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_Task_Creator", "UserProfile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserProfile>("Model.FK_Task_Creator", "UserProfile", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_Task_ParentTask", "Task1")]
        public EntityCollection<Task> Task1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("Model.FK_Task_ParentTask", "Task1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("Model.FK_Task_ParentTask", "Task1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_Task_ParentTask", "Task")]
        public Task Task2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("Model.FK_Task_ParentTask", "Task").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("Model.FK_Task_ParentTask", "Task").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Task> Task2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Task>("Model.FK_Task_ParentTask", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Task>("Model.FK_Task_ParentTask", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_Task_Team", "Team")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("Model.FK_Task_Team", "Team").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("Model.FK_Task_Team", "Team").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("Model.FK_Task_Team", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("Model.FK_Task_Team", "Team", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="Team")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Team : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Team object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="teamName">Initial value of the TeamName property.</param>
        /// <param name="invitationCode">Initial value of the InvitationCode property.</param>
        public static Team CreateTeam(global::System.Int32 id, global::System.String teamName, global::System.String invitationCode)
        {
            Team team = new Team();
            team.Id = id;
            team.TeamName = teamName;
            team.InvitationCode = invitationCode;
            return team;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TeamName
        {
            get
            {
                return _TeamName;
            }
            set
            {
                OnTeamNameChanging(value);
                ReportPropertyChanging("TeamName");
                _TeamName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TeamName");
                OnTeamNameChanged();
            }
        }
        private global::System.String _TeamName;
        partial void OnTeamNameChanging(global::System.String value);
        partial void OnTeamNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String InvitationCode
        {
            get
            {
                return _InvitationCode;
            }
            set
            {
                OnInvitationCodeChanging(value);
                ReportPropertyChanging("InvitationCode");
                _InvitationCode = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("InvitationCode");
                OnInvitationCodeChanged();
            }
        }
        private global::System.String _InvitationCode;
        partial void OnInvitationCodeChanging(global::System.String value);
        partial void OnInvitationCodeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_Task_Team", "Task")]
        public EntityCollection<Task> Tasks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("Model.FK_Task_Team", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("Model.FK_Task_Team", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_UserProfileTeam_Team", "UserProfileTeam")]
        public EntityCollection<UserProfileTeam> UserProfileTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserProfileTeam>("Model.FK_UserProfileTeam_Team", "UserProfileTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserProfileTeam>("Model.FK_UserProfileTeam_Team", "UserProfileTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="UserProfile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserProfile : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserProfile object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="userName">Initial value of the UserName property.</param>
        /// <param name="fullName">Initial value of the FullName property.</param>
        /// <param name="emailAddress">Initial value of the EmailAddress property.</param>
        public static UserProfile CreateUserProfile(global::System.Int32 id, global::System.String userName, global::System.String fullName, global::System.String emailAddress)
        {
            UserProfile userProfile = new UserProfile();
            userProfile.Id = id;
            userProfile.UserName = userName;
            userProfile.FullName = fullName;
            userProfile.EmailAddress = emailAddress;
            return userProfile;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FullName
        {
            get
            {
                return _FullName;
            }
            set
            {
                OnFullNameChanging(value);
                ReportPropertyChanging("FullName");
                _FullName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FullName");
                OnFullNameChanged();
            }
        }
        private global::System.String _FullName;
        partial void OnFullNameChanging(global::System.String value);
        partial void OnFullNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EmailAddress
        {
            get
            {
                return _EmailAddress;
            }
            set
            {
                OnEmailAddressChanging(value);
                ReportPropertyChanging("EmailAddress");
                _EmailAddress = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EmailAddress");
                OnEmailAddressChanged();
            }
        }
        private global::System.String _EmailAddress;
        partial void OnEmailAddressChanging(global::System.String value);
        partial void OnEmailAddressChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_Task_Creator", "Task")]
        public EntityCollection<Task> Tasks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("Model.FK_Task_Creator", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("Model.FK_Task_Creator", "Task", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_UserProfileLogin_UserProfile", "UserProfileLogin")]
        public EntityCollection<UserProfileLogin> UserProfileLogins
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserProfileLogin>("Model.FK_UserProfileLogin_UserProfile", "UserProfileLogin");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserProfileLogin>("Model.FK_UserProfileLogin_UserProfile", "UserProfileLogin", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_UserProfileTeam_UserProfile", "UserProfileTeam")]
        public EntityCollection<UserProfileTeam> UserProfileTeams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserProfileTeam>("Model.FK_UserProfileTeam_UserProfile", "UserProfileTeam");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserProfileTeam>("Model.FK_UserProfileTeam_UserProfile", "UserProfileTeam", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="UserProfileLogin")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserProfileLogin : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserProfileLogin object.
        /// </summary>
        /// <param name="uniqueIdentifier">Initial value of the UniqueIdentifier property.</param>
        public static UserProfileLogin CreateUserProfileLogin(global::System.String uniqueIdentifier)
        {
            UserProfileLogin userProfileLogin = new UserProfileLogin();
            userProfileLogin.UniqueIdentifier = uniqueIdentifier;
            return userProfileLogin;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UniqueIdentifier
        {
            get
            {
                return _UniqueIdentifier;
            }
            set
            {
                if (_UniqueIdentifier != value)
                {
                    OnUniqueIdentifierChanging(value);
                    ReportPropertyChanging("UniqueIdentifier");
                    _UniqueIdentifier = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("UniqueIdentifier");
                    OnUniqueIdentifierChanged();
                }
            }
        }
        private global::System.String _UniqueIdentifier;
        partial void OnUniqueIdentifierChanging(global::System.String value);
        partial void OnUniqueIdentifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserProfileId
        {
            get
            {
                return _UserProfileId;
            }
            set
            {
                OnUserProfileIdChanging(value);
                ReportPropertyChanging("UserProfileId");
                _UserProfileId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserProfileId");
                OnUserProfileIdChanged();
            }
        }
        private Nullable<global::System.Int32> _UserProfileId;
        partial void OnUserProfileIdChanging(Nullable<global::System.Int32> value);
        partial void OnUserProfileIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_UserProfileLogin_UserProfile", "UserProfile")]
        public UserProfile UserProfile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_UserProfileLogin_UserProfile", "UserProfile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_UserProfileLogin_UserProfile", "UserProfile").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserProfile> UserProfileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_UserProfileLogin_UserProfile", "UserProfile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserProfile>("Model.FK_UserProfileLogin_UserProfile", "UserProfile", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="UserProfileTeam")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserProfileTeam : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserProfileTeam object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="teamId">Initial value of the TeamId property.</param>
        /// <param name="userProfileId">Initial value of the UserProfileId property.</param>
        /// <param name="isTeamAdministrator">Initial value of the IsTeamAdministrator property.</param>
        public static UserProfileTeam CreateUserProfileTeam(global::System.Int32 id, global::System.Int32 teamId, global::System.Int32 userProfileId, global::System.Boolean isTeamAdministrator)
        {
            UserProfileTeam userProfileTeam = new UserProfileTeam();
            userProfileTeam.Id = id;
            userProfileTeam.TeamId = teamId;
            userProfileTeam.UserProfileId = userProfileId;
            userProfileTeam.IsTeamAdministrator = isTeamAdministrator;
            return userProfileTeam;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TeamId
        {
            get
            {
                return _TeamId;
            }
            set
            {
                OnTeamIdChanging(value);
                ReportPropertyChanging("TeamId");
                _TeamId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TeamId");
                OnTeamIdChanged();
            }
        }
        private global::System.Int32 _TeamId;
        partial void OnTeamIdChanging(global::System.Int32 value);
        partial void OnTeamIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserProfileId
        {
            get
            {
                return _UserProfileId;
            }
            set
            {
                OnUserProfileIdChanging(value);
                ReportPropertyChanging("UserProfileId");
                _UserProfileId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserProfileId");
                OnUserProfileIdChanged();
            }
        }
        private global::System.Int32 _UserProfileId;
        partial void OnUserProfileIdChanging(global::System.Int32 value);
        partial void OnUserProfileIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsTeamAdministrator
        {
            get
            {
                return _IsTeamAdministrator;
            }
            set
            {
                OnIsTeamAdministratorChanging(value);
                ReportPropertyChanging("IsTeamAdministrator");
                _IsTeamAdministrator = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsTeamAdministrator");
                OnIsTeamAdministratorChanged();
            }
        }
        private global::System.Boolean _IsTeamAdministrator;
        partial void OnIsTeamAdministratorChanging(global::System.Boolean value);
        partial void OnIsTeamAdministratorChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_UserProfileTeam_Team", "Team")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("Model.FK_UserProfileTeam_Team", "Team").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("Model.FK_UserProfileTeam_Team", "Team").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("Model.FK_UserProfileTeam_Team", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("Model.FK_UserProfileTeam_Team", "Team", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_UserProfileTeam_UserProfile", "UserProfile")]
        public UserProfile UserProfile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_UserProfileTeam_UserProfile", "UserProfile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_UserProfileTeam_UserProfile", "UserProfile").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserProfile> UserProfileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserProfile>("Model.FK_UserProfileTeam_UserProfile", "UserProfile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserProfile>("Model.FK_UserProfileTeam_UserProfile", "UserProfile", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
